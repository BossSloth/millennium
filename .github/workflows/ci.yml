name: Build Millennium

on:
    workflow_dispatch:
        inputs:
            release_artifacts:
                description: 'Release build?'
                required: true
                default: 'no'

concurrency:
    group: ci-build
    cancel-in-progress: true

jobs:
    build-windows:
        permissions:
            contents: write
            issues: write
            pull-requests: write

        runs-on: windows-latest

        env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
            VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

        steps:
            - name: Export GitHub Actions cache environment variables
              uses: actions/github-script@v7
              with:
                  script: |
                      core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
                      core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: true

            - name: (Setup) Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: (Setup) Semantic Release
              run: npm install --save-dev semantic-release @semantic-release/github @semantic-release/exec @semantic-release/changelog @semantic-release/git
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: (Setup) Get Next Version
              run: . scripts\ci\win32\version.ps1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: (Setup) Environment Variables
              run: |
                  echo "${{ secrets.ENVIRONMENT_VARS }}" >> assets/.env

            - name: (Setup) Assets Build Environment
              run: cd assets && npm install && npm run build
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: (Setup) Build Assets
              run: . scripts\ci\win32\mk-assets.ps1

            - name: (Setup) Construct Python Environment
              run: . scripts\ci\win32\setup-python.ps1 D:/a/env/ext/data/cache

            - name: (Python) Download 3.11.8 win32 source
              run: |
                  Invoke-WebRequest -Uri "https://github.com/SteamClientHomebrew/PythonBuildAgent/releases/download/v1.0.7/python-windows.zip" -OutFile "python-windows.zip"
                  Expand-Archive -Path "python-windows.zip" -DestinationPath "./Python-3.11.8" -Force
                  New-Item -ItemType Directory -Force -Path "./build/python"
                  ls ./Python-3.11.8

                  Copy-Item ./Python-3.11.8/python3.dll ./build/python/python311.dll
                  Copy-Item ./Python-3.11.8/python3_d.dll ./build/python/python311_d.dll
                  Copy-Item ./Python-3.11.8/python3.lib ./build/python/python311.lib
                  Copy-Item ./Python-3.11.8/python3_d.lib ./build/python/python311_d.lib

            - name: Install prerequisites
              uses: msys2/setup-msys2@v2
              with:
                  msystem: mingw32
                  install: mingw-w64-i686-libgcrypt mingw-w64-i686-gcc mingw-w64-i686-cmake mingw-w64-i686-ninja unzip

            - name: (Dependency) Install vcpkg
              shell: pwsh
              run: ./vendor/vcpkg/bootstrap-vcpkg.bat && ./vendor/vcpkg/vcpkg integrate install

            - name: (Generator) Configure CMake
              shell: msys2 {0}
              run: cmake --preset=windows-mingw-release -DGITHUB_ACTION_BUILD=ON

            - name: Install Node.js and npm
              shell: msys2 {0}
              run: |
                  curl -fsSL https://nodejs.org/dist/v16.20.0/node-v16.20.0-win-x86.zip -o node.zip
                  unzip node.zip -d /usr/local
                  export PATH="/usr/local/node-v16.20.0-win-x86:$PATH"
                  node --version
                  npm --version

            - name: Build Millennium
              shell: msys2 {0}
              run: |
                  mkdir ./build/artifacts
                  cmake --build build --config Release -- -j$(nproc)
                  cp ./build/python/python311.dll D:/a/env/python311.dll
                  cp ./build/preload/user32.dll  D:/a/env/user32.dll
                  cp ./build/millennium.dll D:/a/env/millennium.dll
                  mkdir D:/a/env/ext/bin
                  # Disable Millennium CLI for now, as it keeps get false positive detections for no apparent reason
                  # cp ./build/cli/millennium.exe D:/a/env/ext/bin/millennium.exe

            - name: Add API modules
              run: |
                  New-Item -ItemType Directory -Force -Path "D:/a/env/ext/data/shims"
                  npm install -g @steambrew/api@latest
                  $pkgPath = Join-Path (npm root -g) "@steambrew/api/build/*"
                  Copy-Item -Recurse -Force $pkgPath "D:/a/env/ext/data/shims/"

            - name: Upload Build Artifact
              uses: actions/upload-artifact@v4
              with:
                  include-hidden-files: true
                  name: millennium-windows
                  path: D:/a/env/

    build-linux:
        permissions:
            contents: write
            issues: write
            pull-requests: write

        runs-on: ubuntu-latest

        steps:
            - name: Export GitHub Actions cache environment variables
              uses: actions/github-script@v7
              with:
                  script: |
                      core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
                      core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: true

            - name: (Setup) Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: (Setup) Semantic Release
              run: npm install --save-dev semantic-release @semantic-release/github @semantic-release/exec @semantic-release/changelog @semantic-release/git
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: (Setup) Get Next Version
              run: bash scripts/ci/posix/version.sh
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: (Setup) Environment Variables
              run: |
                  echo "${{ secrets.ENVIRONMENT_VARS }}" >> assets/.env

            - name: (Setup) Assets Build Environment
              run: cd assets && npm install && npm run build
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: (Setup) Build Assets
              run: bash scripts/ci/posix/mk-assets.sh

            - name: Install dependencies
              run: |
                  sudo dpkg --add-architecture i386
                  sudo apt-get update
                  sudo apt-get install -y build-essential gcc-multilib g++-multilib

            - name: Download Python 3.11.8 Binaries
              run: |
                  wget https://github.com/shdwmtr/pybuilder/releases/download/v1.0.6/python-3.11.8-32-bit.tar.gz -O python-3.11.8-32-bit.tar.gz
                  mkdir -p ~/build/opt/python-i686-3.11.8
                  mkdir -p ~/build/usr/lib/millennium
                  mkdir -p /opt/python-i686-3.11.8/lib

                  tar -xzf python-3.11.8-32-bit.tar.gz -C ~/build/opt/python-i686-3.11.8
                  mv ~/build/opt/python-i686-3.11.8/python-build/* ~/build/opt/python-i686-3.11.8/

                  cp ~/build/opt/python-i686-3.11.8/lib/libpython-3.11.8.so /opt/python-i686-3.11.8/lib/libpython-3.11.8.so
                  ~/build/opt/python-i686-3.11.8/bin/python3.11 --version

            - name: (Generator) Install CMake
              uses: jwlawson/actions-setup-cmake@v2
              with:
                  cmake-version: '3.21.1'

            - name: (Dependency) Install vcpkg & setup environment
              run: sudo apt install libgtk-3-dev ninja-build &&  ./vendor/vcpkg/bootstrap-vcpkg.sh && ./vendor/vcpkg/vcpkg integrate install

            - name: (Generator) Configure CMake
              run: cmake --preset=linux-release -G "Ninja" -DGITHUB_ACTION_BUILD=ON

            - name: Build and Package Millennium
              run: |
                  # Build the project
                  cmake --build build --config Release -- -j$(nproc)

                  # Install npm dependencies
                  npm install -g @steambrew/api@latest

                  # Create final directory structure
                  mkdir -p ~/build/usr/lib/millennium
                  mkdir -p ~/build/usr/bin
                  mkdir -p ~/build/usr/share/millennium
                  mkdir -p ~/build/usr/share/millennium/shims
                  mkdir -p ~/build/opt

                  # Copy binaries and libraries directly to final locations
                  cp ./build/libmillennium_x86.so ~/build/usr/lib/millennium/libmillennium_x86.so
                  cp ./build/cli/millennium ~/build/usr/bin/millennium
                  chmod +x ~/build/usr/bin/millennium

                  # Copy npm package data
                  cp -r $(npm root -g)/@steambrew/api/build/* ~/build/usr/share/millennium/shims/

                  # Copy additional assets
                  cp -r ~/env/ext/data/assets ~/build/usr/share/millennium/assets

            - name: Upload Build Artifact
              uses: actions/upload-artifact@v4
              with:
                  include-hidden-files: true
                  name: millennium-linux
                  path: ~/build/

    release:
        needs: [build-windows, build-linux]
        runs-on: ubuntu-latest
        if: ${{ inputs.release_artifacts == 'yes' }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Install Semantic Release
              run: npm install --save-dev semantic-release @semantic-release/github @semantic-release/exec @semantic-release/changelog @semantic-release/git
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Download Windows Artifact
              uses: actions/download-artifact@v4
              with:
                  name: millennium-windows
                  path: ./artifacts/windows

            - name: Download Linux Artifact
              uses: actions/download-artifact@v4
              with:
                  name: millennium-linux
                  path: ./artifacts/linux

            - name: Bump Version
              id: read_version
              run: bash scripts/ci/posix/bump.sh
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Proccess Artifacts
              run: |
                  mkdir -p ./artifacts/release
                  zip -r ./artifacts/release/millennium-v${{ steps.read_version.outputs.version }}-windows-x86_64.zip ./artifacts/windows/*
                  tar -czvf ./artifacts/release/millennium-v${{ steps.read_version.outputs.version }}-linux-x86_64.tar.gz -C ./artifacts/linux .

            - name: Create GitHub Release
              run: npx semantic-release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
